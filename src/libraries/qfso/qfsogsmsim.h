/*
 * This file was generated by qfsodbusxml2cpp version 0.7
 * Command line was: qfsodbusxml2cpp -p qfsogsmsim -c QFsoGSMSIM specs/xml/org.freesmartphone.GSM.SIM.xml
 *
 * qfsodbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QFSOGSMSIM_H_1306329414
#define QFSOGSMSIM_H_1306329414

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "qfsosimhomezone.h"
#include "qfsosimentry.h"

/*
 * Proxy class for interface org.freesmartphone.GSM.SIM
 */
class QFsoGSMSIM: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freesmartphone.GSM.SIM"; }

public:
    QFsoGSMSIM(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QFsoGSMSIM();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ChangeAuthCode(const QString &old_pin, const QString &new_pin)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(old_pin) << qVariantFromValue(new_pin);
        return asyncCallWithArgumentList(QLatin1String("ChangeAuthCode"), argumentList);
    }

    inline QDBusPendingReply<> DeleteEntry(const QString &category, int index)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(category) << qVariantFromValue(index);
        return asyncCallWithArgumentList(QLatin1String("DeleteEntry"), argumentList);
    }

    inline QDBusPendingReply<> DeleteMessage(int index)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(index);
        return asyncCallWithArgumentList(QLatin1String("DeleteMessage"), argumentList);
    }

    inline QDBusPendingReply<bool> GetAuthCodeRequired()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetAuthCodeRequired"), argumentList);
    }

    inline QDBusPendingReply<QString> GetAuthStatus()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetAuthStatus"), argumentList);
    }

    inline QDBusPendingReply<QFsoSIMHomeZone> GetHomeZoneParameters()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetHomeZoneParameters"), argumentList);
    }

    inline QDBusPendingReply<int, int, int> GetPhonebookInfo(const QString &category)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(category);
        return asyncCallWithArgumentList(QLatin1String("GetPhonebookInfo"), argumentList);
    }
    inline QDBusReply<int> GetPhonebookInfo(const QString &category, int &numberlength, int &namelength)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(category);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("GetPhonebookInfo"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            numberlength = qdbus_cast<int>(reply.arguments().at(1));
            namelength = qdbus_cast<int>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<QString> GetServiceCenterNumber()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetServiceCenterNumber"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetSimInfo()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetSimInfo"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetUnlockCounters()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetUnlockCounters"), argumentList);
    }

    inline QDBusPendingReply<QString, QString, QString, QVariantMap> RetrieveMessage(int index)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(index);
        return asyncCallWithArgumentList(QLatin1String("RetrieveMessage"), argumentList);
    }
    inline QDBusReply<QString> RetrieveMessage(int index, QString &sender_number, QString &contents, QVariantMap &properties)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(index);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("RetrieveMessage"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 4) {
            sender_number = qdbus_cast<QString>(reply.arguments().at(1));
            contents = qdbus_cast<QString>(reply.arguments().at(2));
            properties = qdbus_cast<QVariantMap>(reply.arguments().at(3));
        }
        return reply;
    }

    inline QDBusPendingReply<QFsoSIMEntry> RetrievePhonebook(const QString &category, int mindex, int maxdex)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(category) << qVariantFromValue(mindex) << qVariantFromValue(maxdex);
        return asyncCallWithArgumentList(QLatin1String("RetrievePhonebook"), argumentList);
    }

    inline QDBusPendingReply<> SendAuthCode(const QString &pin)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(pin);
        return asyncCallWithArgumentList(QLatin1String("SendAuthCode"), argumentList);
    }

    inline QDBusPendingReply<QString> SendGenericSimCommand(const QString &command)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(command);
        return asyncCallWithArgumentList(QLatin1String("SendGenericSimCommand"), argumentList);
    }

    inline QDBusPendingReply<QString> SendRestrictedSimCommand(int command, int fileid, int p1, int p2, int p3, const QString &data)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(command) << qVariantFromValue(fileid) << qVariantFromValue(p1) << qVariantFromValue(p2) << qVariantFromValue(p3) << qVariantFromValue(data);
        return asyncCallWithArgumentList(QLatin1String("SendRestrictedSimCommand"), argumentList);
    }

    inline QDBusPendingReply<int, QString> SendStoredMessage(int index)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(index);
        return asyncCallWithArgumentList(QLatin1String("SendStoredMessage"), argumentList);
    }
    inline QDBusReply<int> SendStoredMessage(int index, QString &timestamp)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(index);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("SendStoredMessage"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            timestamp = qdbus_cast<QString>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<> SetAuthCodeRequired(bool check, const QString &pin)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(check) << qVariantFromValue(pin);
        return asyncCallWithArgumentList(QLatin1String("SetAuthCodeRequired"), argumentList);
    }

    inline QDBusPendingReply<> SetServiceCenterNumber(const QString &number)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(number);
        return asyncCallWithArgumentList(QLatin1String("SetServiceCenterNumber"), argumentList);
    }

    inline QDBusPendingReply<> StoreEntry(const QString &category, int index, const QString &name, const QString &number)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(category) << qVariantFromValue(index) << qVariantFromValue(name) << qVariantFromValue(number);
        return asyncCallWithArgumentList(QLatin1String("StoreEntry"), argumentList);
    }

    inline QDBusPendingReply<int> StoreMessage(const QString &recipient_number, const QString &contents, const QVariantMap &properties)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(recipient_number) << qVariantFromValue(contents) << qVariantFromValue(properties);
        return asyncCallWithArgumentList(QLatin1String("StoreMessage"), argumentList);
    }

    inline QDBusPendingReply<> Unlock(const QString &puk, const QString &new_pin)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(puk) << qVariantFromValue(new_pin);
        return asyncCallWithArgumentList(QLatin1String("Unlock"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void AuthStatus(const QString &status);
    void IncomingMessage(int index);
};

namespace org {
  namespace freesmartphone {
    namespace GSM {
      typedef ::QFsoGSMSIM SIM;
    }
  }
}
#endif
