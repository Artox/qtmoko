/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i orgfreesmartphonegsmcalldetaillist.h -p orgfreesmartphonegsmcall specs/xml/org.freesmartphone.GSM.Call.xml
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORGFREESMARTPHONEGSMCALL_H_1305990597
#define ORGFREESMARTPHONEGSMCALL_H_1305990597

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "orgfreesmartphonegsmcalldetaillist.h"

/*
 * Proxy class for interface org.freesmartphone.GSM.Call
 */
class OrgFreesmartphoneGSMCallInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freesmartphone.GSM.Call"; }

public:
    OrgFreesmartphoneGSMCallInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreesmartphoneGSMCallInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Activate(int id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id);
        return asyncCallWithArgumentList(QLatin1String("Activate"), argumentList);
    }

    inline QDBusPendingReply<> ActivateConference(int id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id);
        return asyncCallWithArgumentList(QLatin1String("ActivateConference"), argumentList);
    }

    inline QDBusPendingReply<> Emergency(const QString &number)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(number);
        return asyncCallWithArgumentList(QLatin1String("Emergency"), argumentList);
    }

    inline QDBusPendingReply<> HoldActive()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("HoldActive"), argumentList);
    }

    inline QDBusPendingReply<int> Initiate(const QString &number, const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(number) << qVariantFromValue(type);
        return asyncCallWithArgumentList(QLatin1String("Initiate"), argumentList);
    }

    inline QDBusPendingReply<> Join()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Join"), argumentList);
    }

    inline QDBusPendingReply<OrgFreesmartphoneGSMCallDetailList> ListCalls()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ListCalls"), argumentList);
    }

    inline QDBusPendingReply<> Release(int id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id);
        return asyncCallWithArgumentList(QLatin1String("Release"), argumentList);
    }

    inline QDBusPendingReply<> ReleaseAll()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ReleaseAll"), argumentList);
    }

    inline QDBusPendingReply<> ReleaseHeld()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ReleaseHeld"), argumentList);
    }

    inline QDBusPendingReply<> SendDtmf(const QString &tones)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tones);
        return asyncCallWithArgumentList(QLatin1String("SendDtmf"), argumentList);
    }

    inline QDBusPendingReply<> Transfer(const QString &number)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(number);
        return asyncCallWithArgumentList(QLatin1String("Transfer"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void CallStatus(int id, const QString &status, const QVariantMap &properties);
};

namespace org {
  namespace freesmartphone {
    namespace GSM {
      typedef ::OrgFreesmartphoneGSMCallInterface Call;
    }
  }
}
#endif
