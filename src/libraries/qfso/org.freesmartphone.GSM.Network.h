/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p org.freesmartphone.GSM.Network specs/xml/org.freesmartphone.GSM.Network.xml
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_FREESMARTPHONE_GSM_NETWORK_H_1305187329
#define ORG_FREESMARTPHONE_GSM_NETWORK_H_1305187329

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freesmartphone.GSM.Network
 */
class OrgFreesmartphoneGSMNetworkInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freesmartphone.GSM.Network"; }

public:
    OrgFreesmartphoneGSMNetworkInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreesmartphoneGSMNetworkInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> DisableCallForwarding(const QString &reason, const QString &class)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(reason) << qVariantFromValue(class);
        return asyncCallWithArgumentList(QLatin1String("DisableCallForwarding"), argumentList);
    }

    inline QDBusPendingReply<> EnableCallForwarding(const QString &reason, const QString &class, const QString &number, int timeout)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(reason) << qVariantFromValue(class) << qVariantFromValue(number) << qVariantFromValue(timeout);
        return asyncCallWithArgumentList(QLatin1String("EnableCallForwarding"), argumentList);
    }

    inline QDBusPendingReply<QString> GetCallingIdentification()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetCallingIdentification"), argumentList);
    }

    inline QDBusPendingReply<int> GetSignalStrength()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetSignalStrength"), argumentList);
    }

    inline QDBusPendingReply<int, int, int, int> GetTimeReport()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetTimeReport"), argumentList);
    }
    inline QDBusReply<int> GetTimeReport(int &timestamp, int &zone, int &zonestamp)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("GetTimeReport"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 4) {
            timestamp = qdbus_cast<int>(reply.arguments().at(1));
            zone = qdbus_cast<int>(reply.arguments().at(2));
            zonestamp = qdbus_cast<int>(reply.arguments().at(3));
        }
        return reply;
    }

    inline QDBusPendingReply<> Register()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Register"), argumentList);
    }

    inline QDBusPendingReply<> RegisterWithProvider(const QString &operator_code)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(operator_code);
        return asyncCallWithArgumentList(QLatin1String("RegisterWithProvider"), argumentList);
    }

    inline QDBusPendingReply<> SendUssdRequest(const QString &request)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(request);
        return asyncCallWithArgumentList(QLatin1String("SendUssdRequest"), argumentList);
    }

    inline QDBusPendingReply<> SetCallingIdentification(const QString &status)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(status);
        return asyncCallWithArgumentList(QLatin1String("SetCallingIdentification"), argumentList);
    }

    inline QDBusPendingReply<> Unregister()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Unregister"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void CipherStatus(const QString &telephony, const QString &pdp);
    void IncomingUssd(const QString &mode, const QString &message);
    void SignalStrength(int signal_strength);
    void TimeReport(int time, int zone);
};

namespace org {
  namespace freesmartphone {
    namespace GSM {
      typedef ::OrgFreesmartphoneGSMNetworkInterface Network;
    }
  }
}
#endif
