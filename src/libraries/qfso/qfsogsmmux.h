/*
 * This file was generated by qfsodbusxml2cpp version 0.7
 * Command line was: qfsodbusxml2cpp -p qfsogsmmux -c QFsoGSMMUX specs/xml/org.freesmartphone.GSM.MUX.xml
 *
 * qfsodbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QFSOGSMMUX_H_1306329414
#define QFSOGSMMUX_H_1306329414

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freesmartphone.GSM.MUX
 */
class QFsoGSMMUX: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freesmartphone.GSM.MUX"; }

public:
    QFsoGSMMUX(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QFsoGSMMUX();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString, int> AllocChannel(const QString &origin, int channel)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(origin) << qVariantFromValue(channel);
        return asyncCallWithArgumentList(QLatin1String("AllocChannel"), argumentList);
    }
    inline QDBusReply<QString> AllocChannel(const QString &origin, int channel, int &allocated_channel)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(origin) << qVariantFromValue(channel);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("AllocChannel"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            allocated_channel = qdbus_cast<int>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<> CloseSession()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("CloseSession"), argumentList);
    }

    inline QDBusPendingReply<> OpenSession(bool advanced, int framesize, const QString &portname, int portspeed)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(advanced) << qVariantFromValue(framesize) << qVariantFromValue(portname) << qVariantFromValue(portspeed);
        return asyncCallWithArgumentList(QLatin1String("OpenSession"), argumentList);
    }

    inline QDBusPendingReply<> ReleaseChannel(const QString &origin)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(origin);
        return asyncCallWithArgumentList(QLatin1String("ReleaseChannel"), argumentList);
    }

    inline QDBusPendingReply<> SetStatus(int channel, const QString &status)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(channel) << qVariantFromValue(status);
        return asyncCallWithArgumentList(QLatin1String("SetStatus"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Status(const QString &status);
};

namespace org {
  namespace freesmartphone {
    namespace GSM {
      typedef ::QFsoGSMMUX MUX;
    }
  }
}
#endif
