/*
 * This file was generated by qfsodbusxml2cpp version 0.7
 * Command line was: qfsodbusxml2cpp -p qfsodeviceaudio -c QFsoDeviceAudio specs/xml/org.freesmartphone.Device.Audio.xml
 *
 * qfsodbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QFSODEVICEAUDIO_H
#define QFSODEVICEAUDIO_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <qfsodbusabstractinterface.h>

#if defined(QFSO_LIBRARY)
    #define QFSO_EXPORT Q_DECL_EXPORT
#else
    #define QFSO_EXPORT Q_DECL_IMPORT
#endif

/*
 * Proxy class for interface org.freesmartphone.Device.Audio
 */
class QFSO_EXPORT QFsoDeviceAudio: public QFsoDbusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freesmartphone.Device.Audio"; }

public:
    QFsoDeviceAudio(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QFsoDeviceAudio();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QStringList> GetAvailableScenarios()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("GetAvailableScenarios"), argumentList);
    }

    inline QDBusPendingReply<QString> GetScenario()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("GetScenario"), argumentList);
    }

    inline QDBusPendingReply<uchar> GetVolume()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("GetVolume"), argumentList);
    }

    inline QDBusPendingReply<> PlaySound(const QString &name, int loop, int length)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name) << qVariantFromValue(loop) << qVariantFromValue(length);
        return fsoAsyncCall(QLatin1String("PlaySound"), argumentList);
    }

    inline QDBusPendingReply<QString> PullScenario()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("PullScenario"), argumentList);
    }

    inline QDBusPendingReply<> PushScenario(const QString &scenario)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(scenario);
        return fsoAsyncCall(QLatin1String("PushScenario"), argumentList);
    }

    inline QDBusPendingReply<> SaveScenario(const QString &scenario)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(scenario);
        return fsoAsyncCall(QLatin1String("SaveScenario"), argumentList);
    }

    inline QDBusPendingReply<> SetScenario(const QString &scenario)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(scenario);
        return fsoAsyncCall(QLatin1String("SetScenario"), argumentList);
    }

    inline QDBusPendingReply<> SetVolume(uchar volume)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(volume);
        return fsoAsyncCall(QLatin1String("SetVolume"), argumentList);
    }

    inline QDBusPendingReply<> StopAllSounds()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("StopAllSounds"), argumentList);
    }

    inline QDBusPendingReply<> StopSound(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name);
        return fsoAsyncCall(QLatin1String("StopSound"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Scenario(const QString &scenario, const QString &reason);
    void SoundStatus(const QString &id, const QString &status, const QVariantMap &properties);
};

namespace org {
  namespace freesmartphone {
    namespace Device {
      typedef ::QFsoDeviceAudio Audio;
    }
  }
}
#endif
