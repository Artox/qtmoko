/*
 * This file was generated by qfsodbusxml2cpp version 0.7
 * Command line was: qfsodbusxml2cpp -p qfsogsmsms -c QFsoGSMSMS specs/xml/org.freesmartphone.GSM.SMS.xml
 *
 * qfsodbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QFSOGSMSMS_H_1306329414
#define QFSOGSMSMS_H_1306329414

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "qfsosimmessage.h"

/*
 * Proxy class for interface org.freesmartphone.GSM.SMS
 */
class QFsoGSMSMS: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freesmartphone.GSM.SMS"; }

public:
    QFsoGSMSMS(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QFsoGSMSMS();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<uint> GetSizeForTextMessage(const QString &contents)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(contents);
        return asyncCallWithArgumentList(QLatin1String("GetSizeForTextMessage"), argumentList);
    }

    inline QDBusPendingReply<QFsoSIMMessage> RetrieveTextMessages()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RetrieveTextMessages"), argumentList);
    }

    inline QDBusPendingReply<int, QString> SendTextMessage(const QString &recipient_number, const QString &contents, bool report)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(recipient_number) << qVariantFromValue(contents) << qVariantFromValue(report);
        return asyncCallWithArgumentList(QLatin1String("SendTextMessage"), argumentList);
    }
    inline QDBusReply<int> SendTextMessage(const QString &recipient_number, const QString &contents, bool report, QString &timestamp)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(recipient_number) << qVariantFromValue(contents) << qVariantFromValue(report);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("SendTextMessage"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            timestamp = qdbus_cast<QString>(reply.arguments().at(1));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
    void IncomingMessageReport(int reference, const QString &status, const QString &sender_number, const QString &contents);
    void IncomingTextMessage(const QString &number, const QString &timestamp, const QString &contents);
};

namespace org {
  namespace freesmartphone {
    namespace GSM {
      typedef ::QFsoGSMSMS SMS;
    }
  }
}
#endif
