/*
 * This file was generated by qfsodbusxml2cpp version 0.7
 * Command line was: qfsodbusxml2cpp -p qfsogsmcall -c QFsoGSMCall specs/xml/org.freesmartphone.GSM.Call.xml
 *
 * qfsodbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QFSOGSMCALL_H
#define QFSOGSMCALL_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <qfsodbusabstractinterface.h>
#include "qfsocalldetail.h"

#if defined(QFSO_LIBRARY)
    #define QFSO_EXPORT Q_DECL_EXPORT
#else
    #define QFSO_EXPORT Q_DECL_IMPORT
#endif

/*
 * Proxy class for interface org.freesmartphone.GSM.Call
 */
class QFSO_EXPORT QFsoGSMCall: public QFsoDbusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freesmartphone.GSM.Call"; }

public:
    QFsoGSMCall(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QFsoGSMCall();

public Q_SLOTS: // METHODS
    inline QFsoDBusPendingReply<> Activate(int id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id);
        return fsoAsyncCall(QLatin1String("Activate"), argumentList);
    }

    inline QFsoDBusPendingReply<> ActivateConference(int id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id);
        return fsoAsyncCall(QLatin1String("ActivateConference"), argumentList);
    }

    inline QFsoDBusPendingReply<> Emergency(const QString &number)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(number);
        return fsoAsyncCall(QLatin1String("Emergency"), argumentList);
    }

    inline QFsoDBusPendingReply<> HoldActive()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("HoldActive"), argumentList);
    }

    inline QFsoDBusPendingReply<int> Initiate(const QString &number, const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(number) << qVariantFromValue(type);
        return fsoAsyncCall(QLatin1String("Initiate"), argumentList);
    }

    inline QFsoDBusPendingReply<> Join()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("Join"), argumentList);
    }

    inline QFsoDBusPendingReply<QFsoCallDetailList> ListCalls()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("ListCalls"), argumentList);
    }

    inline QFsoDBusPendingReply<> Release(int id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id);
        return fsoAsyncCall(QLatin1String("Release"), argumentList);
    }

    inline QFsoDBusPendingReply<> ReleaseAll()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("ReleaseAll"), argumentList);
    }

    inline QFsoDBusPendingReply<> ReleaseHeld()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("ReleaseHeld"), argumentList);
    }

    inline QFsoDBusPendingReply<> SendDtmf(const QString &tones)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tones);
        return fsoAsyncCall(QLatin1String("SendDtmf"), argumentList);
    }

    inline QFsoDBusPendingReply<> Transfer(const QString &number)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(number);
        return fsoAsyncCall(QLatin1String("Transfer"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void CallStatus(int id, const QString &status, const QVariantMap &properties);
};

namespace org {
  namespace freesmartphone {
    namespace GSM {
      typedef ::QFsoGSMCall Call;
    }
  }
}
#endif
