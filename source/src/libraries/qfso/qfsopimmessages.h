/*
 * This file was generated by qfsodbusxml2cpp version 0.7
 * Command line was: qfsodbusxml2cpp -p qfsopimmessages -c QFsoPIMMessages specs/xml/org.freesmartphone.PIM.Messages.xml
 *
 * qfsodbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QFSOPIMMESSAGES_H
#define QFSOPIMMESSAGES_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <qfsodbusabstractinterface.h>

#if defined(QFSO_LIBRARY)
    #define QFSO_EXPORT Q_DECL_EXPORT
#else
    #define QFSO_EXPORT Q_DECL_IMPORT
#endif

/*
 * Proxy class for interface org.freesmartphone.PIM.Messages
 */
class QFSO_EXPORT QFsoPIMMessages: public QFsoDbusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freesmartphone.PIM.Messages"; }

public:
    QFsoPIMMessages(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QFsoPIMMessages();

public Q_SLOTS: // METHODS
    inline QFsoDBusPendingReply<QString> Add(const QVariantMap &message_data)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(message_data);
        return fsoAsyncCall(QLatin1String("Add"), argumentList);
    }

    inline QFsoDBusPendingReply<QString> AddIncoming(const QVariantMap &message_data)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(message_data);
        return fsoAsyncCall(QLatin1String("AddIncoming"), argumentList);
    }

    inline QFsoDBusPendingReply<QString> GetSingleEntrySingleField(const QVariantMap &query, const QString &field)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(query) << qVariantFromValue(field);
        return fsoAsyncCall(QLatin1String("GetSingleEntrySingleField"), argumentList);
    }

    inline QFsoDBusPendingReply<int> GetUnreadMessages()
    {
        QList<QVariant> argumentList;
        return fsoAsyncCall(QLatin1String("GetUnreadMessages"), argumentList);
    }

    inline QFsoDBusPendingReply<QString> Query(const QVariantMap &query)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(query);
        return fsoAsyncCall(QLatin1String("Query"), argumentList);
    }

    inline QFsoDBusPendingReply<QString> QueryThreads(const QVariantMap &query)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(query);
        return fsoAsyncCall(QLatin1String("QueryThreads"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void DeletedMessage(const QString &message_path);
    void IncomingMessage(const QString &message_path);
    void NewMessage(const QString &message_path);
    void UnreadMessages(int amount);
    void UpdatedMessage(const QString &message_path, const QVariantMap &message_data);
};

namespace org {
  namespace freesmartphone {
    namespace PIM {
      typedef ::QFsoPIMMessages Messages;
    }
  }
}
#endif
