/*
 * This file was generated by qfsodbusxml2cpp version 0.7
 * Command line was: qfsodbusxml2cpp -p qfsonetwork -c QFsoNetwork specs/xml/org.freesmartphone.Network.xml
 *
 * qfsodbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QFSONETWORK_H
#define QFSONETWORK_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <qfsodbusabstractinterface.h>

#if defined(QFSO_LIBRARY)
    #define QFSO_EXPORT Q_DECL_EXPORT
#else
    #define QFSO_EXPORT Q_DECL_IMPORT
#endif

/*
 * Proxy class for interface org.freesmartphone.Network
 */
class QFSO_EXPORT QFsoNetwork: public QFsoDbusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freesmartphone.Network"; }

public:
    QFsoNetwork(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QFsoNetwork();

public Q_SLOTS: // METHODS
    inline QFsoDBusPendingReply<> OfferDefaultRoute(const QString &technology, const QString &interface, const QString &ipv4address, const QString &ipv4mask, const QString &ipv4gateway, const QString &dns1, const QString &dns2)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(technology) << qVariantFromValue(interface) << qVariantFromValue(ipv4address) << qVariantFromValue(ipv4mask) << qVariantFromValue(ipv4gateway) << qVariantFromValue(dns1) << qVariantFromValue(dns2);
        return fsoAsyncCall(QLatin1String("OfferDefaultRoute"), argumentList);
    }

    inline QFsoDBusPendingReply<> StartConnectionSharingWithInterface(const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface);
        return fsoAsyncCall(QLatin1String("StartConnectionSharingWithInterface"), argumentList);
    }

    inline QFsoDBusPendingReply<> StopConnectionSharingWithInterface(const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface);
        return fsoAsyncCall(QLatin1String("StopConnectionSharingWithInterface"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace freesmartphone {
    typedef ::QFsoNetwork Network;
  }
}
#endif
